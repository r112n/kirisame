#+TITLE: Emacs configuration file
#+AUTHOR: Marisa (Nikita Stavtsev)

* Base
** Repositories
*** Load package module
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (require 'package)
#+END_SRC

*** Add MELPA to repository list
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

*** Initialize repositories
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

*** Setting custom file
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq custom-file "./custom.el")
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

** Backup directory
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq backup-directory-alist '(("." . "~/tmp/")))
#+END_SRC

** Vanilla UI
*** Disable trash UI
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq inhibit-startup-message t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC

*** Enable column number in status-line
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (column-number-mode 1)
#+END_SRC

*** TODO Global & relative line numeration
Enable Global numeration
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (global-display-line-numbers-mode 1)
#+END_SRC

** Themes

*** Moe theme
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'moe-theme)
    (package-install 'moe-theme))
#+END_SRC

*** Abyss theme
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'abyss-theme)
    (package-install 'abyss-theme))
#+END_SRC

*** Theme enable
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  ;; (load-theme 'wombat t)
  ;; (load-theme 'moe-dark t)
  (load-theme 'abyss t)
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
           ("C-x b" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           :map helm-map
           ("C-j" . helm-next-line)
           ("C-k" . helm-previous-line))
    :config (helm-mode 1)
            (setq-default helm-M-x-fuzzy-match t))
#+END_SRC

* Evil

** Preparations
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq evil-want-keybinding nil)
#+END_SRC

** TODO evil-leader
- TODO --------------------
  Window managment chords
---------------------------
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package evil-leader
    :ensure t
    :config (setq evil-leader/leader "<SPC>")
            (evil-leader/set-key
              "." 'helm-find-files
              "b" 'helm-buffers-list
              "k" 'kill-buffer))
#+END_SRC

** evil-mode
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package evil
    :after evil-leader
    :ensure t
    :config (global-evil-leader-mode 1)
            (evil-mode 1)
            (evil-set-undo-system 'undo-tree))
#+END_SRC

** undo-tree
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode 1))
#+END_SRC

** evil-collection
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package evil-collection
    :after evil
    :ensure t
    :config (evil-collection-init))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package magit
    :ensure t)
#+END_SRC

* VTerm
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package vterm
    :ensure t
    :init (add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode 0))))
#+END_SRC

* Feebleline
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package feebleline
    :ensure t
    :config (setq feebleline-msg-functions
	    '((feebleline-line-number         :post "" :fmt "%5s")
	      (feebleline-column-number       :pre ":" :fmt "%-2s")
	      (feebleline-file-directory      :face feebleline-dir-face :post "")
	      (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
	      (feebleline-file-modified-star  :face font-lock-warning-face :post "")
	      (feebleline-git-branch          :face feebleline-git-face :pre " : ")
	      (feebleline-project-name        :align right)))
            (feebleline-mode 1))
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package which-key
    :ensure t
    :init (which-key-mode 1)
    :config (setq which-key-idle-delay 0.3))
#+END_SRC

* Code Complition
** complition-at-point bind
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (global-set-key (kbd "C-M-i") 'completion-at-point)
#+END_SRC

** TODO LSP
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package lsp-mode
    :ensure t)
#+END_SRC

** FlyCheck
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode 1))
#+END_SRC

* Org
** Settings
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq org-startup-indented t)
  (setq org-startup-with-inline-images nil)
#+END_SRC

** org-superstar
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode))
#+END_SRC

** org-evil
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package org-evil
    :ensure t
    :hook (org-mode . org-evil-mode))
#+END_SRC

* LaTeX

** AUCTeX
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package auctex
    :ensure t
    :defer t)
#+END_SRC

** pdf-tools
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package pdf-tools
    :ensure t)
#+END_SRC

** latex-preview-pane
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package latex-preview-pane
    :ensure t)
#+END_SRC

