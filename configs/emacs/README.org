#+TITLE: Emacs configuration file
#+AUTHOR: marisa (Nikita Stavtsev)
#+STARTUP: fold

* Base

** Package repositories

*** Enable MELPA package repositories
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

*** Setting custom.el file
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq custom-file "~/.config/emacs/custom.el")
#+END_SRC

*** Install 'use-package' package
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

** UI

*** Base UI configuration
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq inhibit-startup-message t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)
#+END_SRC

*** Backup directory
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq backup-directory-alist '(("." . "~/tmp/")))
#+END_SRC

*** Theme installing and configuration
Moe theme
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'moe-theme)
    (package-install 'moe-theme))
#+END_SRC

Abyss theme
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (unless (package-installed-p 'abyss-theme)
    (package-install 'abyss-theme))
#+END_SRC

*** Theme setup
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  ;; (load-theme 'wombat t)
  ;; (load-theme 'moe-dark t)
  (load-theme 'abyss t)
#+END_SRC

** Binds

*** TODO global && relative line numbers

*** complition-at-point
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (global-set-key (kbd "<C-tab>") 'completion-at-point)
#+END_SRC

*** keyboard-escape-quit
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC


* Evil-mode

** Evil-mode
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-tree)
    )
#+END_SRC

** Undo-tree
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode 1)
    )
#+END_SRC


* Helm-family

** Helm
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("C-x b" . helm-buffers-list)
	   ("C-x C-f" . helm-find-files)
	   :map helm-map
	   ("C-j" . helm-next-line)
           ("C-k" . helm-previous-line))
    :config
    (helm-mode 1)
    (setq-default helm-M-x-fuzzy-match t)
    )
#+END_SRC


* Org-mode

** Org-mode settings
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq org-startup-folded t)
  (setq org-startup-indented t)
  (setq org-startup-with-inline-images nil)
#+END_SRC

** Org-superstar
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode))
#+END_SRC

** Org-evil
Check README.org on `https://github.com/Somelauw/evil-org-mode/blob/master/README.org`
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package org-evil
    :ensure t
    :hook (org-mode . org-evil-mode))
#+END_SRC
    

* Useful utils

** magit
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package magit
    :ensure t)
#+END_SRC

** pdftools
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package pdf-tools
    :ensure t)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package which-key
    :ensure t
    :init (which-key-mode 1)
    :config
    (setq which-key-idle-delay 0.3)
    )
#+END_SRC


* Language tools

** LSP
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package lsp-mode
    :ensure t)
#+END_SRC

** FlyCheck
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode 1))
#+END_SRC


* LaTeX

** AUCTeX
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package auctex
    :ensure t
    :defer t)
#+END_SRC

Set preview application to pdf-tools
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
#+END_SRC

** latex-preview-pane
#+BEGIN_SRC emacs-lisp :tangle "./init.el"
  (use-package latex-preview-pane
    :ensure t)
#+END_SRC

